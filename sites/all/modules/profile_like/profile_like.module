<?php

  /**
 * @file
 * The favorites module allows users to bookmark any path within a site.
 */

/**
 * Implements hook_menu().
 */
function profile_like_menu() {
  $items['profilelike/%ctools_js/vote/%'] = array(
    'page callback' => 'profile_like_add',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['profile/notification'] = array(
    'page callback' => 'notification_list',
    'access callback' => TRUE,
    'title' => 'Notifications',
    'type' => MENU_CALLBACK,
  );
  
  $items['notify/remove/%'] = array(
    'page callback' => 'notify_remove',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Add a favorite.
 */
function profile_like_add($js, $like_uid) {
  global $user;
  if (!$js) {
    return MENU_ACCESS_DENIED;
  }
  db_insert('profile_like')
    ->fields(array(
      'uid' => $user->uid,
      'like_uid' => $like_uid,
    ))
    ->execute();
	
  profile_like_notify($user->uid, $like_uid);
  $count = db_query('SELECT count(*) as Total from {profile_like} WHERE like_uid=:like_uid', 
	array(':like_uid' => $like_uid))->fetchField();	
  ctools_include('ajax');
  $output = '<i class="glyphicon glyphicon-thumbs-up"></i><span> '. $count .' Supporters</span>';
  $commands = array();
  $commands[] = ajax_command_html("#profile-like", $output);
  print ajax_render($commands);
  exit;
}

function profile_like_notify($uid, $like_uid) {
	global $user;
	$recipient = user_load($like_uid);
	$account = user_load($uid);
	$about_us = profile2_load_by_user($account, 'about_us');	
	$name = $about_us->field_user_name['und'][0]['value'];
	
	$message = "$name likes your profile.";
	
	$params['recipient'] = $recipient;
	$params['message'] = $message;
      // token replace for email from address
      $data = array(
        'privatemsg_message' => $params['message'],
        'privatemsg_recipient' => $params['recipient'],
      );
      $options = array(
        'language' => user_preferred_language($params['recipient']),
        // Don't sanitize output since this is used in an email, not a browser.
        'sanitize' => FALSE,
        // Custom token to avoid custom token handling.
        'privatemsg-display-invalid' => FALSE,
      );
      $from = variable_get('site_mail', '');
	  //$from = '"'. variable_get('site_name', 'Drupal') .'" <'. variable_get('site_mail', '') .'>';
	  
      drupal_mail('profile_like', 'notice', $recipient->mail, user_preferred_language($recipient), $params, !empty($from) ? $from : NULL);
      db_insert('profile_notify')->fields(array('uid' => $like_uid, 'notify_uid' => $account->uid ,'msg' => $message, 'type' => 'like', 'status' => 1))->execute();
}

/**
 * Implements hook_mail().
 */
function profile_like_mail($key, &$message, $params) {
  switch ($key) {
    case 'notice':
      $data = array(
        'privatemsg_message' => $params['message'],
        'privatemsg_recipient' => $params['recipient'],
      );
      $options = array(
        'language' => user_preferred_language($params['recipient']),
        // Don't sanitize output since this is used in an email, not a browser.
        'sanitize' => FALSE,
        // Custom token to avoid custom token handling.
        'privatemsg-display-invalid' => FALSE,
      );

      $message['subject'] = "Like your profile";
      $message['body'][] = $params['message'];
      break;
  }
}

function notification_count() {
	global $user;
	$count = db_query('select count(id) as total from {profile_notify} WHERE uid=:uid and status=:status', 
		array(':uid' => $user->uid, ':status' => 1))->fetchField();
	if(!empty($count)) {
		return true;
	}else {
		return false;
	}
}

function notification_list() {
  global $user;
  $query = db_select('profile_notify', 'pn');
  $query->fields('pn');
  $query->condition('pn.uid', $user->uid, '=');
  $notify = $query->execute()->fetchAll();

  $num_updated =  db_update('profile_notify')
	->fields(array('status' => 0))
	->condition('uid', $user->uid, '=')
	->execute();
  
   $load_more = '';
  if(!empty($notify)) {
	ctools_include('ajax');     
	foreach ($notify as $noti) {      
          if(isset($noti->notify_uid) && is_numeric($noti->notify_uid)) {
            $account = user_load($noti->notify_uid);
            $img = style_pic('profile_pic' , $account);

          }else {
            $filepath = base_path().drupal_get_path('theme', 'springup').'/images/user.png';
            $img = theme('image', array('path' => $filepath));
          }
          $n_path = base_path().drupal_get_path_alias('user/'.$noti->notify_uid);
          $note_msg = '<a href="'.$n_path.'">'. $noti->msg .'</a>';
          $url = ctools_ajax_text_button("X", "notify/remove/". $noti->id, t(''), 'notification-remove');	 
          $items[] = array('data' => $img . $note_msg . $url , 'id' => 'not-'.$noti->id) ;
	}
    //$load_more = '<span id="notification-load" data-name="1" class="load-more">Load more notifications</span>';    
  }else {
	  $items[] = 'Not available';
  }
  return '<div id="notification-profile">' . theme('item_list', array('items' => $items, 'type' => 'ul')) . $load_more .' </div>';
}

function notify_remove($id) {
	db_delete('profile_notify')
      ->condition('id', $id, '=')
      ->execute();
  $commands = array();
  $commands[] = ajax_command_remove("#not-".$id);
  print ajax_render($commands);
  exit;
}